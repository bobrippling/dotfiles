# vim:ft=conf
# This is an example resource file for rTorrent. Copy to
# /home/rob/.rtorrent.rc and enable/modify the options as needed. Remember to
# uncomment the options you wish to enable.

# Maximum and minimum number of peers to connect to per torrent.
min_peers = 20
max_peers = 30

# Same as above but for seeding completed torrents (-1 = same as downloading)
min_peers_seed = 10
max_peers_seed = 50

# Maximum number of simultanious uploads per torrent.
max_uploads = 8

# Global upload and download rate in KiB. "0" for unlimited.
download_rate = 0
upload_rate   = 0

# Default directory to save the downloaded torrents.
#directory = /home/rob/Downloads
directory = ~/Downloads/Files
#/mnt/mBig/Torrents

# Default session directory. Make sure you don't run multiple instance
# of rtorrent using the same session directory. Perhaps using a
# relative path?
session = ~/Downloads/session


# Watch a directory for new torrents, restart torrents that have been
# copied back and stop those that have been deleted.

#schedule = watch_directory,10,10,load_start=/home/rob/Download/watch/*.torrent
#schedule = tied_directory,10,10,start_tied=
#schedule = untied_directory,10,10,close_untied=
# Original commented out one: schedule = untied_directory,5,5,stop_untied=


# Watch another directory with a different destination. (0.7.7+)

#schedule = watch_directory_2,10,10,"load_start=/home/rob/Download/watch_stuff/*.torrent,d.set_directory=/home/rob/Download/stuff/"

# Watch a directory for new torrents, and stop those that have been
# deleted.
schedule = watch_directory,5,5,load_start=/home/rob/Downloads/torrents/*.autotorrent
schedule = untied_directory,5,5,stop_untied=
schedule = tied_directory,5,5,start_tied=


# Close torrents when diskspace is low.
#schedule = low_diskspace,5,60,close_low_diskspace=100M

# The "stop_on_ratio" command can be scheduled to stop torrents that have reached a specified upload ratio.
# The above example will stop a torrent once it has uploaded 200% of the torrent size,
# unless less than 50MB has been uploaded and the ratio is below 300%.
#schedule = ratio,60,60,"stop_on_ratio=200,50M,300"
#schedule = ratio,60,60,"stop_on_ratio=100"


# The ip address reported to the tracker.
#ip = 127.0.0.1
#ip = rakshasa.no

# The ip address the listening socket and outgoing connections is
# bound to.
#bind = 127.0.0.1
#bind = rakshasa.no

# Port range to use for listening.
port_range = 6910-6910

# Start opening ports at a random position within the port range.
port_random = no

# Check hash for finished torrents. Might be useful until the bug is
# fixed that causes lack of diskspace not to be properly reported.
check_hash = yes

# Set whetever the client should try to connect to UDP trackers.
use_udp_trackers = yes

# Alternative calls to bind and ip that should handle dynamic ip's.
#schedule = ip_tick,0,1800,ip=rakshasa
#schedule = bind_tick,0,1800,bind=rakshasa

# Encryption options, set to none (default) or any combination of the following:
# allow_incoming, try_outgoing, require, require_RC4, enable_retry, prefer_plaintext
#
# The example value allows incoming encrypted connections, starts unencrypted
# outgoing connections but retries with encryption if they fail, preferring
# plaintext to RC4 encryption after the encrypted handshake
#
# Hard - force enc
#encryption = allow_incoming,require_RC4
# Soft - force enc, but retry without if they won't
encryption = allow_incoming,require_RC4,enable_retry

# Enable DHT support for trackerless torrents or when all trackers are down.
# May be set to "disable" (completely disable DHT), "off" (do not start DHT),
# "auto" (start and stop DHT as needed), or "on" (start DHT immediately).
# The default is "off". For DHT to work, a session directory must be defined.
#
dht = auto

# UDP port to use for DHT.
#
dht_port = 6881

# Enable peer exchange (for torrents not marked private)
#
peer_exchange = yes

#
# Do not modify the following parameters unless you know what you're doing.
#

# Hash read-ahead controls how many MB to request the kernel to read
# ahead. If the value is too low the disk may not be fully utilized,
# while if too high the kernel might not be able to keep the read
# pages in memory thus end up trashing.
#hash_read_ahead = 10

# Interval between attempts to check the hash, in milliseconds.
#hash_interval = 100

# Number of attempts to check the hash while using the mincore status,
# before forcing. Overworked systems might need lower values to get a
# decent hash checking rate.
#hash_max_tries = 10

# unlimited between 2300 and 0600
#schedule = throttle_0,23:00:00,06:00:00,download_rate=0

# limited
#schedule = throttle_1,06:00:00,23:00:00,download_rate=1
